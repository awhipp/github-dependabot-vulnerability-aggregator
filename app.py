# Imports
import os
from dotenv import load_dotenv
from github import Github

# Load .env file
load_dotenv()

# Get GitHub SDK object using GIT_TOKEN
access_token = os.getenv('GIT_TOKEN')
g = Github(access_token)

# Get all repos (public and private)
organization = os.getenv('organization')
repos = g.get_organization(organization).get_repos()
repo_list = [i for i in repos]

with open(os.getenv('OUTPUT_NAME'), 'w') as f:

    f.write('Repository,Vulnerable Library,Current Version,Target Version,Location\n')
    # Loop through each repository
    idx = 0
    for repo in repo_list:
        # If vulnerability alerts are enabled print the repo
        if repo.get_vulnerability_alert():
            # Get relevant information here
            pulls = repo.get_pulls()
            pull_list = [p for p in pulls]
            
            # Get the vulnerabiltiies based on PRs opened by dependabot specifically
            vulnerabilities = []
            for pull in pull_list:
                if not pull.is_merged() and 'dependabot' in pull.user.login:
                    if 'build(deps-dev): ' in pull.title:
                        vulnerabilities.append('%s' % pull.title.replace('build(deps-dev): ', ''))
                    else:
                        vulnerabilities.append('%s' % pull.title)
            
            # Only log vulnerabilities to CSV if they exist for the repo
            if len(vulnerabilities) > 0:
                for vulnerability in set(vulnerabilities):
                    if not 'Upgrade to GitHub-native Dependabot' in vulnerability:
                        print(vulnerability)

                        v_split = vulnerability.split(' ')
                        library = v_split[1]
                        version_low = v_split[3]
                        version_high = v_split[5]
                        location = 'N/A'
                        if len(v_split) > 7:
                            location = v_split[7]

                        f.write('%s,%s,%s,%s,%s\n' % (repo.full_name, library, version_low, version_high, location))

        # Log percent complete for tracking
        idx += 1
        percent = idx/len(repo_list)*100
        print('Percent Complete: %s' % str(percent))